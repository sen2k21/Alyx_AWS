Lab 9 - AWS CLI to RDS
	aws rds describe-instances
	
	Console -> delete the database
		1. de-Select final snapshot
		2. Delete
		
	Confirm -> manual /automatic snapshot is empty
Lab 8 - Connect using mysql plugin
	Console -> rds -> copy endpoint for database
	Chrome -> search for mysql plugin for chrome -> launch
	Connection -> name -
				  host - endpoint
				  port - 3306
				  login - admin
				  password - 
				Test connection
				Connect
	Query editor 
		select innodb
			Create table dept (deptno numeric(2) primary key, dname varchar(20), loc varchar(20))
			insert into dept values (10,'HR','Pnq');
		refresh -> check the table name
		
		
Lab 7 - RDS
	Console -> Services -> RDS
	Create database
		Standard Create
		MySQL
			Version - 5.6.34
			Templates - Free Tier
			DB instance identifier - mydb
			Master - admin
			password - mypassword
			db instance  - t2.micro
			storage - no change
			connectiving - no change
			public access - yes
			VPC security group
				New (name - rdssecgroup
			Database authentication - no change
			Create Database
			
			
Lab 6 - terminate all instances using CLI
 aws ec2 describe-instances
 aws ec2 terminate-instances --instance-ids {i-09e775819e57e2b97}


Lab 5 - EC2 (linux instance)

	Console -> Services -> EC2 -> launch instance
		Select AMI - linux
			select CentOS 7 (x86_64) - with Updates HVM

		Hardware 
			Free tier (t2.micro)
		Next(*)
			Storage
			Tag
			Network -(protocol, port, ip address(current machine, custom, all))-> rdp, ssh
			Security -> download/select pem file 
		Launch
		
	ec2 -> instance -> select instance -> connect
			Select SSH client
				Windows (Check installation)-run the command
			Putty
				puttygen -> convert pem file to ppk
				run putty -> with ppk file

Lab 4 - EC2 (windows instance)
	Console -> Services -> EC2 -> launch instance
		Select AMI - search for windows 
			select Microsoft Windows Server 2019 Base
		Hardware 
			Free tier (t2.micro)
		Next(*)
			Storage
			Tag
			Network -(protocol, port, ip address(current machine, custom, all))-> rdp, ssh
			Security -> download pem file
		Launch
	ec2 -> instance -> select instance -> connect
			RDP -> Download RDP, click on get password -select pem file and decrypt
			
	Click on RDP file-> give password and connect
	On Remote windows instance	
			Disable all firewall
	cmd>ping dnsname
		observe error
	Console -> click on ec2 instance ->security -> click on security group
			edit inbound rule
				Custom ICMP - IPv4 -> echo request -> from all ip addresses -> save
	cmd>ping dnsname
		successful

Lab 3 - S3
	Using Console
		Make a file public
		Enable Versioning
			upload a file (once)-> check url 
			upload same file again (with some changes)-> check url and public access
	Using CLI
		Create s3 bucket
		List Contents of bucket
		copy files from local directory to s3 bucket
		remove all buckets

Lab 2 -  IAM
	Console
		Create User (Console, CLI, COnsole+CLI)
		Create Group (attach policies + couple of users to test)
	CLI
		REST(Create, delete, get, list,put, update)
		Create user
			aws iam  create-user --user-name user3
		attach policy
			  aws iam attach-user-policy --user-name user3 --policy-arn arn:aws:iam::aws:policy/AdministratorAccess
	CLI
		Create a group (grp1)
		allow admin access to group
		create a user (usr5)
		modify user to be part of that group
		
Lab 1 - installation AWS CLI
	check .aws folder (c:\users\login(admin)\.aws)
		if available  (alternative -> work with profiles)
			rename credentials to credentials.alyx
			rename config to config.alyx
	cmd prompt>
			aws s3 ls
			 see error - Unable to locate credentials. You can configure credentials by running "aws configure"
	browser -> aws console -> iam -> create user ->  select Programmatic access	 add policy (admin..)
			download csv
	
	cmd prompt>aws configure
		AWS Access Key ID [None]: (from csv)
		AWS Secret Access Key [None]: (from csv)
		Default region name [None]: us-east-1
		Default output format [None]: json
	check .aws folder (c:\users\login(admin)\.aws)
		see 4 files (if preexisting) or 2 files
	cmd>aws s3 ls
