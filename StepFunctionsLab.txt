
2. Expose it as API Gateway
1. Create a role
	API Gateway Role ->API Gateway
		Grant Permissions ->AWSStepfunctionfullaccess
		copy role->	arn:aws:iam::850774225033:role/MyAPIRoleForStateInvoke
2. Expose statemachine as API Gateway
		Console -> Services -> Step Function
			Create API -> REST API -> build 
				Choose the protocol
					REST
					Create new API -> new API
					Setting 	name - demo1step
					Endpoint Type - regional
				
				Actions
					new resource
						Resource Name - demo1
						Resource Path - /demo1
						create resource
				Actions (on /demo1)
					create method -> post
						Integration type - AWS Service
						AWS Region - us-east-1
						AWS service -> step functions
						Http method -POst
						action type - use action name
						Action -> StartExecution
						Execution role - put role arn
						Content Handling -> passthrough
						Save
				Test 
					Test
					Post request body  -> edit arn for your state machine
						{
							"input": "{\"name\":\"Fands\"}",
							"name": "MyExecution",
							"stateMachineArn": "arn:aws:states:us-east-1:850774225033:stateMachine:ParallelDemo"
						}
				Check
					State machine -> executions

Optional -> change the integration -> coversion 					
Transfer
{
    "input": "$util.escapeJavaScript($input.json('$'))",
    "stateMachineArn": "arn:aws:states:us-east-1:123456789012:stateMachine:HelloWorld"
} 

and just pass {"input": "{\"name\":\"Fands\"}"}

-----------------------------------------------------------
Parallel Lab for Step function
	Start with a template -> Parallel -> 
		Test 
	Edit this template
		start (input -> from, to)
			states ->Pass State-> Airindia, kingfisher, Jet
			Parallel -> with all three airlines + some time taken(2,7, 3)
			Final state -> show
			

---------------------------------------------------------

Catch Lab for Step function
	Start with a template -> Catch -> invoke a OpenCaseFunction
	try sending different inputs
		{"inputCaseID" :1}
		{"inputCaseID" :"aa"}
		{}
	-> for all -> successed, in flow -> catch messages

Choice Lab for Step function
	Create state machine
		start with a template
			Template - choice state
				standard
		Edit 
			modify all states as "Pass" 
				for Firststate, Next -> remove result, just keep type and next
				for firstMatchState , secondMatchState-> add result as static text 
		Start execution
			{ "fooxx" : "aaa"}
			{"foo" : 1}
			{"foo" : 2}
			{"foo" : 10}
---------------------------------------
Step Functions Lab  -> Select single role for three functions
1. Create lambda functions
		OpenCaseFunction  Input ---> { "inputCaseID":"CardExpired1"}
import json
def lambda_handler(event, context):
 myCaseID = event['inputCaseID']
 myMessage = "Case " + myCaseID + ": opened..."
 
 return  {
  'Case':myCaseID, 
  'Message':myMessage
 }
						Output ----> {   'Case':myCaseID,    'Message': "Case CardExpired1 : opened..."  }
AssignCaseFunction
import json
def lambda_handler(event, context):
 myCaseID = event['Case']
 myMessage = event['Message'] + "assigned..."
 
 return  {
  'Case':myCaseID, 
  'Message':myMessage
}
						Output ----> {   'Case':myCaseID,    'Message': "Case CardExpired1 : opened...assigned..."  }
		
CloseCaseFunction
import json
def lambda_handler(event, context):
  myCaseID = event['Case']
  myMessage = event['Message'] + "Closed..."
  myCaseStatus = "CloseStatus"
  return  {
    'Case':myCaseID, 
    'Status' : myCaseStatus,
    'Message':myMessage
    }
	Output ----> {   'Case':myCaseID, Status:"CloseStatus",   'Message': "Case CardExpired1 : opened...assigned...Closed..,"  }


Create a State Machine & Serverless Workflow
Console->Services->State Machine
Create State Machine
		 Select Author with code snippets.  
			Name = CallCenterStateMachine
			Type = standard
			Replace Code -
{
  "Comment": "A simple AWS Step Functions state machine that automates a call center support session.",
  "StartAt": "Open Case",
  "States": {
    "Open Case": {
      "Type": "Task",
      "Resource": "arn:aws:lambda:us-east-1:850774225033:function:OpenCaseFunction",
      "Next": "Assign Case"
    },
    "Assign Case": {
      "Type": "Task",
      "Resource": "arn:aws:lambda:us-east-1:850774225033:function:AssignCaseFunction",
      "Next": "Close Case"
    },
    "Close Case": {
      "Type": "Task",
      "Resource": "arn:aws:lambda:us-east-1:850774225033:function:CloseCaseFunction",
      "End": true
    }
  }
}
--> select State machines > your machine->
	Start execution
		Monitoring
		Diagram + flow
		Cloud Watch 
		


--> select State machines > your machine->
	Actions -> Ccreate event bridge(CloudWatch) rule
		after 1/2 mins
		check logs
----------------------------------------
Closing -> CloudWatch -> delete rule
		-> State machine -> Delete
